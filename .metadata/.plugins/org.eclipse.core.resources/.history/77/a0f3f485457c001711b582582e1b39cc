package com.eccoplayer.app;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.Intent;
import android.content.ServiceConnection;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.IBinder;
import android.provider.MediaStore;
import android.util.Log;
import android.util.SparseBooleanArray;
import android.view.ActionMode;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.SeekBar;
import android.widget.TextView;

public class MusicListActivity extends Activity{
	static public String TAG = "MusicListActivity";
	private List<MusicItem> mMusicList;
	private ListView mMusicListView;
	private Button mPlayButton;
	private Button mPreButton;
	private Button mNextButton;
	private TextView mMusicTitle;
	private TextView mPlayedTime;
	private TextView mDurationTime;
	private SeekBar mMusicSeekBar;
	private MusicUpdateTask mMusicUpdateTask;
	
	@Override
	protected void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		
		setContentView(R.layout.activity_music_list);
		
		mMusicList = new ArrayList<MusicItem>();
		mMusicListView = (ListView) findViewById(R.id.music_list);
		MusicItemAdapter adapter = new MusicItemAdapter(this, R.layout.music_item, mMusicList);
		mMusicListView.setAdapter(adapter);
		mMusicListView.setOnItemClickListener(mOnMusicItemClickListener);
		mMusicListView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE_MODAL);
		mMusicListView.setMultiChoiceModeListener(mMultiChoiceListener);
		
		mPlayButton = (Button) findViewById(R.id.play_button);
		mPreButton = (Button) findViewById(R.id.pre_button);
		mNextButton = (Button) findViewById(R.id.next_button);
		
		mMusicTitle = (TextView) findViewById(R.id.music_title);
		
		mDurationTime = (TextView) findViewById(R.id.duration_time);
		mPlayedTime = (TextView) findViewById(R.id.played_time);
		mMusicSeekBar = (SeekBar) findViewById(R.id.seek_music);
		mMusicSeekBar.setOnSeekBarChangeListener(mOnSeekBarChangeListener);
		
		mMusicUpdateTask = new MusicUpdateTask();
		mMusicUpdateTask.execute();
		
		Intent i = new Intent(this, MusicService.class);
		startService(i);
		
		bindService(i, mServiceConnection, BIND_AUTO_CREATE);
		
	}
	
	@Override
	protected void onDestroy(){
		super.onDestroy();
		
		if(mMusicUpdateTask != null && mMusicUpdateTask.getStatus() == AsyncTask.Status.RUNNING){
			mMusicUpdateTask.cancel(true);
		}
		
		mMusicUpdateTask = null;
		mMusicService.unregisterOnStateChangeListener(mStateChangeListener);
		unbindService(mServiceConnection);
		
		for(MusicItem item : mMusicList){
			if(item.theme != null){
				item.theme.recycle();
				item.theme = null;
			}
		}
		mMusicList.clear();
	}
	
	private SeekBar.OnSeekBarChangeListener mOnSeekBarChangeListener = new SeekBar.OnSeekBarChangeListener() {
		
		@Override
		public void onStopTrackingTouch(SeekBar seekBar) {
			// TODO Auto-generated method stub
			if(mMusicService != null){
				mMusicService.seekTo(seekBar.getProgress());
			}
		}
		
		@Override
		public void onStartTrackingTouch(SeekBar arg0) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void onProgressChanged(SeekBar arg0, int arg1, boolean arg2) {
			// TODO Auto-generated method stub
			
		}
	};
		
		
	private AdapterView.OnItemClickListener mOnMusicItemClickListener = new AdapterView.OnItemClickListener(){
		
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id){
			
			if(mMusicService != null){
				mMusicService.addPlayList(mMusicList.get(position));
			}
		}
	};
	
	private ListView.MultiChoiceModeListener mMultiChoiceListener = new AbsListView.MultiChoiceModeListener(){
		
		@Override
		public boolean onCreateActionMode(ActionMode mode, Menu menu){
			getMenuInflater().inflate(R.menu.music_choice_actionbar, menu);
			enableControlPanel(false);
			return true;
		}
		
		@Override
		public boolean onPrepareActionMode(ActionMode mode, Menu menu){
			return true;
		}
		
		@Override
		public boolean onActionItemClicked(ActionMode mode, MenuItem item){
			switch(item.getItemId()){
			case R.id.menu_play:
				List musicList = new ArrayList<MusicItem>();
				SparseBooleanArray checkedResult = mMusicListView.getCheckedItemPositions();
				for(int i = 0; i < checkedResult.size(); i ++){
					if(checkedResult.valueAt(i)){
						int pos = checkedResult.keyAt(i);
						MusicItem music = mMusicList.get(pos);
						musicList.add(music);
					}
				}
				mMusicService.addPlayList(musicList);
				
				mode.finish();
			}
			break;
			
			return true;
		}
		
		@Override
		public void onDestroyActionMode(ActionMode mode){
			enableControlPanel(true);
		}
		
		@Override
		public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked){
			
		}
		
	};
	
	private void enableControlPanel(boolean enabled){
		mPlayButton.setEnabled(enabled);
		mPreButton.setEnabled(enabled);
		mNextButton.setEnabled(enabled);
		mMusicSeekBar.setEnabled(enabled);
	}
	
	private void updatePlayingInfo(MusicItem item){
		String times = Utils.convertMSecondToTime(item.duration);
		mDurationTime.setText(times);
		
		times = Utils.convertMSecondToTime(item.playedTime);
		mPlayedTime.setText(times);
		
		mMusicSeekBar.setMax((int) item.duration);
		mMusicSeekBar.setProgress((int) item.playedTime);
		
		mMusicTitle.setText(item.name);
		
	}
	
	private MusicService.OnStateChangeListener mStateChangeListener = new MusicService.OnStateChangeListener(){
		
		@Override
		public void onPlayProgressChange(MusicItem item){
			updatePlayingInfo(item);
		}
		
		@Override
		public void onPlay(MusicItem item){
			mPlayButton.setBackgroundResource(R.mipmap.ic_pause);
			updatePlayingInfo(item);
			enableControlPanel(true);
		}
		
		@Override
		public void onPause(MusicItem item){
			mPlayButton.setBackgroundResource(R.mipmap.ic_pause);
			enableControlPanel(true);
		}
	};
	
	private class MusicUpdateTask extends AsyncTask<Object, MusicItem, Void>{
		List<MusicItem> mDataList = new ArrayList<MusicItem>();
		
		@Override
		protected Void doInBackground(Object... params){
			Uri uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
			String[] searchKey = new String[]{
				MediaStore.Audio.Media._ID,
				MediaStore.Audio.Media.TITLE,
				MediaStore.Audio.Albums.ALBUM_ID,
				MediaStore.Audio.Media.DATA,
				MediaStore.Audio.Media.DURATION
			};
			
			String where = MediaStore.Audio.Media.DATA;
			String[] keywords = null;
			String sortOrder = MediaStore.Audio.Media.DEFAULT_SORT_ORDER;
			
			ContentResolver resolver = getContentResolver();
			Cursor cursor = resolver.query(uri, searchKey, where, keywords, sortOrder);
			
			if(cursor != null){
				while(cursor.moveToNext() && isCancelled()){
					String path = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA));
					String id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Audio.Media._ID));
					Uri musicUri = Uri.withAppendedPath(uri, id);
					
					String name = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.TITLE));
					long duration = cursor.getLong(cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DURATION));
					
					int albumId = cursor.getInt(cursor.getColumnIndexOrThrow(MediaStore.Audio.Albums.ALBUM_ID));
					Uri albumUri = ContentUris.withAppendedId(Uri.parse("content://media/external/audio/albumart"), albumId);
					MusicItem data = new MusicItem(musicUri, albumUri, name, duration, 0);
					
					if(uri != null){
						ContentResolver res = getContentResolver();
						data.theme = Utils.createThemeFromUri(res, albumUri);
					}
					Log.d(TAG, "Real Music Found : " + path);
					
					publishProgress(data);
				}
				cursor.close();
			}
			
			return null;
		} 
		
		@Override
		protected void onProgressUpdate(MusicItem... values){
			MusicItem data = values[0];
			
			mMusicList.add(data);
			
			MusicItemAdapter adapter = (MusicItemAdapter) mMusicListView.getAdapter();
			adapter.notifyDataSetChanged();
		}
	}
	
	private MusicService.MusicServiceIBinder mMusicService;
	
	private ServiceConnection mServiceConnection = new ServiceConnection(){
		
		@Override
		public void onServiceConnected(ComponentName name, IBinder service){
			mMusicService = (MusicService.MusicServiceIBinder) service;
			mMusicService.registerOnStateChangeListener(mStateChangeListener);
			
			MusicItem item = mMusicService.getCurrentMusic();
			if(item == null){
				enableControlPanel(false);
				return;
			} else{
				updatePlayingInfo(item);
			}
			if(mMusicService.isPlaying()){
				mPlayButton.setBackgroundResource(R.mipmap.ic_pause);
			}
		}
		
		@Override
		public void onServiceDisconnected(ComponentName name){
			
		}
	};
			
	public void onClick(View v){
		switch(v.getId()){
		case R.id.play_button:
			if(mMusicService != null){
				if(!mMusicService.isPlaying()){
					mMusicService.play();
				} else{
					mMusicService.pause();
				}
			}
		break;
			
		case R.id.next_button:
			if(mMusicService != null){
				mMusicService.playNext();
			}
		break;
		
		case R.id.pre_button:
			if(mMusicService != null){
				mMusicService.playPre();
			}
		break;
		}	
	}
	
	private void showPlayList(){
		final AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setIcon(R.mipmap.ic_playlist);
		builder.setTitle(R.string.play_list);
		
		List<MusicItem> playList = mMusicService.getPlayList();
		ArrayList<String> data = new ArrayList<String>();
		for(MusicItem music : playList){
			data.add(music.name);
		}
		
		if(data.size() > 0){
			ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, data);
			builder.setAdapter(adapter, null);
		} else{
			builder.setMessage(getString(R.string.no_song));
		}
		builder.setCancelable(true);
		builder.create().show();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu){
		getMenuInflater().inflate(R.menu.main_menu, menu);
		return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item){
		switch(item.getItemId()){
		case R.id.play_list_menu:
			showPlayList();
			break;
		}
		return true;
	}
}



















